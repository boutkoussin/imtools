
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   <!--
This HTML was auto-generated from MATLAB code.
To make changes, update the MATLAB code and republish this document.
      --><title>SCALEFUNCTION - Representation of typical edges and steps.</title><meta name="generator" content="MATLAB 7.14"><link rel="schema.DC" href="http://purl.org/dc/elements/1.1/"><meta name="DC.date" content="2012-05-31"><meta name="DC.source" content="scalefunction.m"><style type="text/css">
html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,font,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td{margin:0;padding:0;border:0;outline:0;font-size:100%;vertical-align:baseline;background:transparent}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:'';content:none}:focus{outine:0}ins{text-decoration:none}del{text-decoration:line-through}table{border-collapse:collapse;border-spacing:0}

html { min-height:100%; margin-bottom:1px; }
html body { height:100%; margin:0px; font-family:Arial, Helvetica, sans-serif; font-size:10px; color:#000; line-height:140%; background:#fff none; overflow-y:scroll; }
html body td { vertical-align:top; text-align:left; }

h1 { padding:0px; margin:0px 0px 25px; font-family:Arial, Helvetica, sans-serif; font-size:1.5em; color:#d55000; line-height:100%; font-weight:normal; }
h2 { padding:0px; margin:0px 0px 8px; font-family:Arial, Helvetica, sans-serif; font-size:1.2em; color:#000; font-weight:bold; line-height:140%; border-bottom:1px solid #d6d4d4; display:block; }
h3 { padding:0px; margin:0px 0px 5px; font-family:Arial, Helvetica, sans-serif; font-size:1.1em; color:#000; font-weight:bold; line-height:140%; }

a { color:#005fce; text-decoration:none; }
a:hover { color:#005fce; text-decoration:underline; }
a:visited { color:#004aa0; text-decoration:none; }

p { padding:0px; margin:0px 0px 20px; }
img { padding:0px; margin:0px 0px 20px; border:none; }
p img, pre img, tt img, li img { margin-bottom:0px; } 

ul { padding:0px; margin:0px 0px 20px 23px; list-style:square; }
ul li { padding:0px; margin:0px 0px 7px 0px; }
ul li ul { padding:5px 0px 0px; margin:0px 0px 7px 23px; }
ul li ol li { list-style:decimal; }
ol { padding:0px; margin:0px 0px 20px 0px; list-style:decimal; }
ol li { padding:0px; margin:0px 0px 7px 23px; list-style-type:decimal; }
ol li ol { padding:5px 0px 0px; margin:0px 0px 7px 0px; }
ol li ol li { list-style-type:lower-alpha; }
ol li ul { padding-top:7px; }
ol li ul li { list-style:square; }

.content { font-size:1.2em; line-height:140%; padding: 20px; }

pre, tt, code { font-size:12px; }
pre { margin:0px 0px 20px; }
pre.error { color:red; }
pre.codeinput { padding:10px; border:1px solid #d3d3d3; background:#f7f7f7; }
pre.codeoutput { padding:10px 11px; margin:0px 0px 20px; color:#4c4c4c; }

@media print { pre.codeinput, pre.codeoutput { word-wrap:break-word; width:100%; } }

span.keyword { color:#0000FF }
span.comment { color:#228B22 }
span.string { color:#A020F0 }
span.untermstring { color:#B20000 }
span.syscmd { color:#B28C00 }

.footer { width:auto; padding:10px 0px; margin:25px 0px 0px; border-top:1px dotted #878787; font-size:0.8em; line-height:140%; font-style:italic; color:#878787; text-align:left; float:none; }
.footer p { margin:0px; }

  </style></head><body><div class="content"><h1>SCALEFUNCTION - Representation of typical edges and steps.</h1><!--introduction--><!--/introduction--><h2>Contents</h2><div><ul><li><a href="#1">Description</a></li><li><a href="#2">Syntax</a></li><li><a href="#3">Inputs</a></li><li><a href="#4">Output</a></li><li><a href="#5">Credit</a></li><li><a href="#6">Function implementation</a></li></ul></div><h2>Description<a name="1"></a></h2><p>Creates a function 1D or 2D with some typical edges and steps.</p><h2>Syntax<a name="2"></a></h2><pre>   F = SCALEFUNCTION( sbin, dim, bound );</pre><h2>Inputs<a name="3"></a></h2><p><b><tt>sbin</tt></b> : the image will have size <tt>11*sbin</tt>; must be a multiple of 3 (or     will be forced.</p><p><b><tt>dim</tt></b> : result will be a graph (<tt>dim=1</tt>) or an image (<tt>dim=2</tt>); default:     <tt>dim=1</tt>.</p><p><b><tt>bound</tt></b> : vector <tt>(3,1)</tt> of the <tt>[min,med,max]</tt> for the values of the     function; default: <tt>bound=[0.8,1,2]</tt>.</p><h2>Output<a name="4"></a></h2><p><b><tt>F</tt></b> : 1D or 2D-function representing some typical edges and steps.</p><h2>Credit<a name="5"></a></h2><p><a href="mailto:grazzja@lanl.gov">J.Grazzini</a> (ISR-2/LANL)</p><h2>Function implementation<a name="6"></a></h2><pre class="codeinput"><span class="keyword">function</span> F = scalefunction( sbin, dim, bound )

<span class="keyword">if</span> exist(<span class="string">'dim'</span>,<span class="string">'var'</span>)~=1,  dim=1; <span class="keyword">end</span>;
<span class="keyword">if</span> exist(<span class="string">'bound'</span>,<span class="string">'var'</span>)~=1
  Min=0.8; Med = 1.; Max = 1.2;
<span class="keyword">else</span>
  Min=bound(1); Med=bound(2); Max=bound(3);
<span class="keyword">end</span>;

Max2 = Med+ 2.*(Max-Med)/3.;
Min2 = Med - 2.*(Med-Min)/3.;

q=floor(sbin/3.);
<span class="keyword">if</span>(sbin~=3*q)
  warning(<span class="string">'scalefunction:inputwarning'</span>, <span class="keyword">...</span>
      [<span class="string">'Parameter sbin='</span>, num2str(sbin), <span class="string">'changed to sbin='</span> num2str(3*q)] );
<span class="keyword">end</span>
sbin=3*q;

size = 11 * sbin;
ncol = size;
<span class="comment">% nraw=size ou 1</span>
nraw = (dim==2)*size + (dim==1);

x = 1:size; y = 1:nraw;
[X,~] = meshgrid(x,y);

F = ones(nraw, ncol);

<span class="comment">%%%%  Edge type 1</span>
<span class="comment">% branche 1</span>
alpha = (Max-Med) / sbin;
beta = Med - alpha * sbin;
F(:, sbin+1:2*sbin) = alpha * X(:, sbin+1:2*sbin) + <span class="keyword">...</span>
    beta;
<span class="comment">% branche 2</span>
alphap = (Med-Max) / sbin;
betap = Med + 3*alpha * sbin;
F(:, 2*sbin+1:3*sbin) = alphap * X(:, 2*sbin+1:3*sbin) <span class="keyword">...</span>
    + betap;

<span class="comment">%%%% Gaussian</span>
sigma=2;
fac = exp(-1/(2*sigma));
[x,~] = meshgrid(linspace(-1,1,2*sbin),1:nraw);
F(:,4*sbin+1:6*sbin) = 1 -fac + exp( - x.^2 / (2*sigma));

<span class="comment">%%%% Edge type 2</span>
x1=q*23; x2=q*25;
<span class="comment">% branche 1</span>
alpha= (Max2-Med) / (2*q);
beta = Med - 7*alpha * sbin;
F(:,7*sbin+1:x1) = alpha * X(:, 7*sbin+1:x1) + beta;
<span class="comment">% branche 3</span>
alphap= (Med-Min2) / (2*q);
betap = Med - 9*alphap * sbin;
F(:,x2:9*sbin) = alphap * X(:, x2:9*sbin) + betap;
<span class="comment">% branche 2</span>
alpha2 = (Min2-Max2) / (2*q);
beta2 = Max2 - alpha2 * 23 * q;
F(:,x1:x2) = alpha2 * X(:, x1:x2) + beta2;

<span class="comment">%%%% Step</span>
F(:,10*sbin+1:ncol) = Min;

<span class="keyword">if</span> dim==1
  figure, plot(X,F)
<span class="keyword">elseif</span> dim==2
  figure, surf(F); colormap <span class="string">jet</span>;
  figure, imagesc(F), colormap <span class="string">gray</span>, axis <span class="string">image</span>;
<span class="keyword">end</span>

<span class="keyword">end</span>
</pre><p class="footer"><br>
      Published with MATLAB&reg; 7.14<br></p></div><!--
##### SOURCE BEGIN #####
%% SCALEFUNCTION - Representation of typical edges and steps.
%
%% Description
% Creates a function 1D or 2D with some typical edges and steps.
%
%% Syntax
%     F = SCALEFUNCTION( sbin, dim, bound );
%     
%% Inputs
% *|sbin|* : the image will have size |11*sbin|; must be a multiple of 3 (or
%     will be forced.
%
% *|dim|* : result will be a graph (|dim=1|) or an image (|dim=2|); default:
%     |dim=1|.
%
% *|bound|* : vector |(3,1)| of the |[min,med,max]| for the values of the 
%     function; default: |bound=[0.8,1,2]|.
%
%% Output
% *|F|* : 1D or 2D-function representing some typical edges and steps.
%
%% Credit
% <mailto:grazzja@lanl.gov J.Grazzini> (ISR-2/LANL)

%% Function implementation
function F = scalefunction( sbin, dim, bound )

if exist('dim','var')~=1,  dim=1; end;
if exist('bound','var')~=1
  Min=0.8; Med = 1.; Max = 1.2;
else 
  Min=bound(1); Med=bound(2); Max=bound(3);
end;

Max2 = Med+ 2.*(Max-Med)/3.;
Min2 = Med - 2.*(Med-Min)/3.;

q=floor(sbin/3.);
if(sbin~=3*q)
  warning('scalefunction:inputwarning', ...
      ['Parameter sbin=', num2str(sbin), 'changed to sbin=' num2str(3*q)] );
end
sbin=3*q;

size = 11 * sbin; 
ncol = size;
% nraw=size ou 1
nraw = (dim==2)*size + (dim==1);

x = 1:size; y = 1:nraw;
[X,~] = meshgrid(x,y);

F = ones(nraw, ncol);

%%%%  Edge type 1
% branche 1
alpha = (Max-Med) / sbin;
beta = Med - alpha * sbin;
F(:, sbin+1:2*sbin) = alpha * X(:, sbin+1:2*sbin) + ...
    beta;
% branche 2
alphap = (Med-Max) / sbin;
betap = Med + 3*alpha * sbin;
F(:, 2*sbin+1:3*sbin) = alphap * X(:, 2*sbin+1:3*sbin) ...
    + betap;

%%%% Gaussian
sigma=2;
fac = exp(-1/(2*sigma));
[x,~] = meshgrid(linspace(-1,1,2*sbin),1:nraw);
F(:,4*sbin+1:6*sbin) = 1 -fac + exp( - x.^2 / (2*sigma));
				   
%%%% Edge type 2
x1=q*23; x2=q*25;
% branche 1
alpha= (Max2-Med) / (2*q);
beta = Med - 7*alpha * sbin;
F(:,7*sbin+1:x1) = alpha * X(:, 7*sbin+1:x1) + beta;
% branche 3
alphap= (Med-Min2) / (2*q);
betap = Med - 9*alphap * sbin;
F(:,x2:9*sbin) = alphap * X(:, x2:9*sbin) + betap;
% branche 2
alpha2 = (Min2-Max2) / (2*q);
beta2 = Max2 - alpha2 * 23 * q;
F(:,x1:x2) = alpha2 * X(:, x1:x2) + beta2;

%%%% Step
F(:,10*sbin+1:ncol) = Min;

if dim==1  
  figure, plot(X,F)
elseif dim==2  
  figure, surf(F); colormap jet;
  figure, imagesc(F), colormap gray, axis image;
end

end

##### SOURCE END #####
--></body></html>